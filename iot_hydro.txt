#ifdef ESP32
#include <WiFi.h>
#else
#include <ESP8266WiFi.h>
#endif
#include <WiFiClientSecure.h>
#include <ESP8266WebServer.h>
#include <UniversalTelegramBot.h> // Universal Telegram Bot Library written by Brian Lough: https://github.com/witnessmenow/Universal-Arduino-Telegram-Bot
#include <ArduinoJson.h>
#include "DHT.h"


// Replace with your network credentials
const char* ssid = "PROJECT";
const char* password = "123456789";

const char* host = "api.thingspeak.com";  
const char* writeAPIKey = "OXNELOJQJXHQS25F";

ESP8266WebServer server(80);

// Use @myidbot to find out the chat ID of an individual or a group
// Also note that you need to click "start" on a bot before it can
// message you
#define CHAT_ID "1232432240"

// Initialize Telegram BOT
#define BOTtoken "6056293051:AAFQXcXwtSwsEj5jLguJI3IWlC369q0-vW0"  // your Bot Token (Get from Botfather)

#ifdef ESP8266
  X509List cert(TELEGRAM_CERTIFICATE_ROOT);
#endif

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//Checks for new messages every 1 second.
int botRequestDelay = 1000;
unsigned long lastTimeBotRan;

float Temperature;
float Humidity;
int sensor;
const int ledPin = D7;
bool ledState = LOW;

#define DHTTYPE DHT11   // DHT 11
uint8_t DHTPin = D8;
DHT dht(DHTPin, DHTTYPE);        

// Get sensor readings and return them as a String variable
String getReadings()
{
  sensor=analogRead(A0);
  Temperature = dht.readTemperature();
  Humidity = dht.readHumidity();
  String message = "Light: " + String(sensor) + " \n";
  message += "Humidity: " + String (Humidity) + " % \n";
  message += "Temperature: " + String (Temperature) + " C \n";
  return message;
}

//Handle what happens when you receive new messages
void handleNewMessages(int numNewMessages)
{
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++)
  {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID)
    {
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
   
    // Print the received message
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/start")
    {
      String welcome = "Welcome, " + from_name + ".\n";
      welcome += "Use the following command to get current readings.\n\n";
      welcome += "/readings \n";
      welcome += "/led_on to turn GPIO ON \n";
      welcome += "/led_off to turn GPIO OFF \n";
      welcome += "/state to request current GPIO state \n";
      bot.sendMessage(chat_id, welcome, "");
    }

    if (text == "/readings")
    {
      String readings = getReadings();
      bot.sendMessage(chat_id, readings, "");
    }

     if (text == "/led_on")
    {
      bot.sendMessage(chat_id, "LED state set to ON", "");
      ledState = HIGH;
      digitalWrite(ledPin, ledState);
    }
   
    if (text == "/led_off")
    {
      bot.sendMessage(chat_id, "LED state set to OFF", "");
      ledState = LOW;
      digitalWrite(ledPin, ledState);
    }
   
    if (text == "/state")
    {
      if (digitalRead(ledPin))
      {
        bot.sendMessage(chat_id, "LED is ON", "");
      }
      else
      {
        bot.sendMessage(chat_id, "LED is OFF", "");
      }
    }
  }
}

void setup()
{
  Serial.begin(115200);
  dht.begin();
  #ifdef ESP8266
    configTime(0, 0, "pool.ntp.org");      // get UTC time via NTP
    client.setTrustAnchors(&cert); // Add root certificate for api.telegram.org
  #endif

  pinMode(DHTPin, INPUT);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledState);
 
  // Connect to Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  #ifdef ESP32
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  #endif
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());
}

void loop()
{
  if (millis() > lastTimeBotRan + botRequestDelay)
  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }

  if(sensor<350)
  {
     bot.sendMessage(CHAT_ID, "LOW LIGHT", "");
  }
  /*.......................................................*/

  Temperature = dht.readTemperature();
  Humidity = dht.readHumidity();

  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort))
  {
    return;
  }
  String url = "/update?key=";
  url+=writeAPIKey;
  url+="&field1=";
  url+=float(Temperature);
  url+="&field2=";
  url+=float(Humidity);
  url+="\r\n";
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
  "Host: " + host + "\r\n" +
  "Connection: close\r\n\r\n");
  Serial.print("\n");
  Serial.println("Send to ThingSpeak.\n");
  client.stop();
  Serial.println("Wait for 15 sec to update next datapack in thingSpeak");
  delay(1000);
}